{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { newLocation } from './newLocation';\nexport function selectRange(state, range, incremental) {\n  return __assign({}, state, {\n    selectionMode: 'range',\n    selectedRanges: (incremental && state.selectionMode === 'range' ? state.selectedRanges : []).concat([range]),\n    selectedIndexes: [],\n    selectedIds: [],\n    activeSelectedRangeIdx: incremental && state.selectionMode === 'range' ? state.selectedRanges.length : 0\n  });\n}\nexport function updateActiveSelectedRange(state, range) {\n  var _a;\n\n  return __assign({}, state, {\n    selectionMode: 'range',\n    selectedRanges: Object.assign([], state.selectedRanges, (_a = {}, _a[state.activeSelectedRangeIdx] = range, _a)),\n    selectedIndexes: [],\n    selectedIds: []\n  });\n}\nexport function selectOneColumn(state, col, incremental) {\n  return __assign({}, state, {\n    selectionMode: 'column',\n    selectedIndexes: (incremental && state.selectionMode === 'column' ? state.selectedIndexes : []).concat(col.idx),\n    selectedIds: (incremental && state.selectionMode === 'column' ? state.selectedIds : []).concat(col.columnId)\n  });\n}\nexport function unSelectOneColumn(state, col) {\n  var updatedIndexes = state.selectedIndexes.filter(function (idx) {\n    return idx !== col.idx;\n  });\n  var updatedIds = state.selectedIds.filter(function (id) {\n    return id !== col.columnId;\n  });\n  return __assign({}, state, {\n    selectionMode: 'column',\n    selectedIndexes: updatedIndexes,\n    selectedIds: updatedIds\n  });\n}\nexport function selectMultipleColumns(state, firstCol, lastCol, incremental) {\n  var firstRow = state.cellMatrix.first.row;\n  var lastRow = state.cellMatrix.last.row;\n  var range = state.cellMatrix.getRange(newLocation(firstRow, firstCol), newLocation(lastRow, lastCol));\n  return __assign({}, state, {\n    selectionMode: 'column',\n    selectedIndexes: incremental ? state.selectedIndexes.concat(range.columns.map(function (col) {\n      return col.idx;\n    })) : range.columns.map(function (col) {\n      return col.idx;\n    }),\n    selectedIds: incremental ? state.selectedIds.concat(range.columns.map(function (col) {\n      return col.columnId;\n    })) : range.columns.map(function (col) {\n      return col.columnId;\n    })\n  });\n}\nexport function selectOneRow(state, row, incremental) {\n  return __assign({}, state, {\n    selectionMode: 'row',\n    selectedIndexes: (incremental && state.selectionMode === 'row' ? state.selectedIndexes : []).concat(row.idx),\n    selectedIds: (incremental && state.selectionMode === 'row' ? state.selectedIds : []).concat(row.rowId)\n  });\n}\nexport function unSelectOneRow(state, row) {\n  var updatedIndexes = state.selectedIndexes.filter(function (idx) {\n    return idx !== row.idx;\n  });\n  var updatedIds = state.selectedIds.filter(function (id) {\n    return id !== row.rowId;\n  });\n  return __assign({}, state, {\n    selectionMode: 'row',\n    selectedIndexes: updatedIndexes,\n    selectedIds: updatedIds\n  });\n}\nexport function selectMultipleRows(state, firstRow, lastRow, incremental) {\n  var firstCol = state.cellMatrix.first.column;\n  var lastCol = state.cellMatrix.last.column;\n  var range = state.cellMatrix.getRange(newLocation(firstRow, firstCol), newLocation(lastRow, lastCol));\n  return __assign({}, state, {\n    selectionMode: 'row',\n    selectedIndexes: incremental ? state.selectedIndexes.concat(range.rows.map(function (row) {\n      return row.idx;\n    })) : range.rows.map(function (row) {\n      return row.idx;\n    }),\n    selectedIds: incremental ? state.selectedIds.concat(range.rows.map(function (row) {\n      return row.rowId;\n    })) : range.rows.map(function (row) {\n      return row.rowId;\n    })\n  });\n}","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/Functions/selectRange.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","newLocation","selectRange","state","range","incremental","selectionMode","selectedRanges","concat","selectedIndexes","selectedIds","activeSelectedRangeIdx","updateActiveSelectedRange","_a","selectOneColumn","col","idx","columnId","unSelectOneColumn","updatedIndexes","filter","updatedIds","id","selectMultipleColumns","firstCol","lastCol","firstRow","cellMatrix","first","row","lastRow","last","getRange","columns","map","selectOneRow","rowId","unSelectOneRow","selectMultipleRows","column","rows"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { newLocation } from './newLocation';\nexport function selectRange(state, range, incremental) {\n    return __assign({}, state, { selectionMode: 'range', selectedRanges: (incremental && state.selectionMode === 'range' ? state.selectedRanges : []).concat([range]), selectedIndexes: [], selectedIds: [], activeSelectedRangeIdx: incremental && state.selectionMode === 'range' ? state.selectedRanges.length : 0 });\n}\nexport function updateActiveSelectedRange(state, range) {\n    var _a;\n    return __assign({}, state, { selectionMode: 'range', selectedRanges: Object.assign([], state.selectedRanges, (_a = {}, _a[state.activeSelectedRangeIdx] = range, _a)), selectedIndexes: [], selectedIds: [] });\n}\nexport function selectOneColumn(state, col, incremental) {\n    return __assign({}, state, { selectionMode: 'column', selectedIndexes: (incremental && state.selectionMode === 'column' ? state.selectedIndexes : []).concat(col.idx), selectedIds: (incremental && state.selectionMode === 'column' ? state.selectedIds : []).concat(col.columnId) });\n}\nexport function unSelectOneColumn(state, col) {\n    var updatedIndexes = state.selectedIndexes.filter(function (idx) { return idx !== col.idx; });\n    var updatedIds = state.selectedIds.filter(function (id) { return id !== col.columnId; });\n    return __assign({}, state, { selectionMode: 'column', selectedIndexes: updatedIndexes, selectedIds: updatedIds });\n}\nexport function selectMultipleColumns(state, firstCol, lastCol, incremental) {\n    var firstRow = state.cellMatrix.first.row;\n    var lastRow = state.cellMatrix.last.row;\n    var range = state.cellMatrix.getRange(newLocation(firstRow, firstCol), newLocation(lastRow, lastCol));\n    return __assign({}, state, { selectionMode: 'column', selectedIndexes: incremental ? state.selectedIndexes.concat(range.columns.map(function (col) { return col.idx; })) : range.columns.map(function (col) { return col.idx; }), selectedIds: incremental ? state.selectedIds.concat(range.columns.map(function (col) { return col.columnId; })) : range.columns.map(function (col) { return col.columnId; }) });\n}\nexport function selectOneRow(state, row, incremental) {\n    return __assign({}, state, { selectionMode: 'row', selectedIndexes: (incremental && state.selectionMode === 'row' ? state.selectedIndexes : []).concat(row.idx), selectedIds: (incremental && state.selectionMode === 'row' ? state.selectedIds : []).concat(row.rowId) });\n}\nexport function unSelectOneRow(state, row) {\n    var updatedIndexes = state.selectedIndexes.filter(function (idx) { return idx !== row.idx; });\n    var updatedIds = state.selectedIds.filter(function (id) { return id !== row.rowId; });\n    return __assign({}, state, { selectionMode: 'row', selectedIndexes: updatedIndexes, selectedIds: updatedIds });\n}\nexport function selectMultipleRows(state, firstRow, lastRow, incremental) {\n    var firstCol = state.cellMatrix.first.column;\n    var lastCol = state.cellMatrix.last.column;\n    var range = state.cellMatrix.getRange(newLocation(firstRow, firstCol), newLocation(lastRow, lastCol));\n    return __assign({}, state, { selectionMode: 'row', selectedIndexes: incremental ? state.selectedIndexes.concat(range.rows.map(function (row) { return row.idx; })) : range.rows.map(function (row) { return row.idx; }), selectedIds: incremental ? state.selectedIds.concat(range.rows.map(function (row) { return row.rowId; })) : range.rows.map(function (row) { return row.rowId; }) });\n}\n"]},"metadata":{},"sourceType":"module"}