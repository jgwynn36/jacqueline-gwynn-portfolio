{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { getCellProperty } from '../Functions/getCellProperty';\n\nvar HeaderCellTemplate = function () {\n  function HeaderCellTemplate() {\n    this.isFocusable = function () {\n      return false;\n    };\n\n    this.getStyle = function (cell) {\n      return {\n        background: 'rgba(0, 0, 0, 0.20)'\n      };\n    };\n  }\n\n  HeaderCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n    var text = getCellProperty(uncertainCell, 'text', 'string');\n    var value = parseFloat(text);\n    return __assign({}, uncertainCell, {\n      text: text,\n      value: value\n    });\n  };\n\n  HeaderCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n    return cell.text;\n  };\n\n  HeaderCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n    return cell.className ? cell.className : '';\n  };\n\n  return HeaderCellTemplate;\n}();\n\nexport { HeaderCellTemplate };","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/CellTemplates/HeaderCellTemplate.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","getCellProperty","HeaderCellTemplate","isFocusable","getStyle","cell","background","getCompatibleCell","uncertainCell","text","value","parseFloat","render","isInEditMode","onCellChanged","getClassName","className"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,eAAT,QAAgC,8BAAhC;;AACA,IAAIC,kBAAkB,GAAI,YAAY;AAClC,WAASA,kBAAT,GAA8B;AAC1B,SAAKC,WAAL,GAAmB,YAAY;AAAE,aAAO,KAAP;AAAe,KAAhD;;AACA,SAAKC,QAAL,GAAgB,UAAUC,IAAV,EAAgB;AAAE,aAAQ;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAAR;AAAiD,KAAnF;AACH;;AACDJ,EAAAA,kBAAkB,CAACL,SAAnB,CAA6BU,iBAA7B,GAAiD,UAAUC,aAAV,EAAyB;AACtE,QAAIC,IAAI,GAAGR,eAAe,CAACO,aAAD,EAAgB,MAAhB,EAAwB,QAAxB,CAA1B;AACA,QAAIE,KAAK,GAAGC,UAAU,CAACF,IAAD,CAAtB;AACA,WAAOtB,QAAQ,CAAC,EAAD,EAAKqB,aAAL,EAAoB;AAAEC,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,KAAK,EAAEA;AAArB,KAApB,CAAf;AACH,GAJD;;AAKAR,EAAAA,kBAAkB,CAACL,SAAnB,CAA6Be,MAA7B,GAAsC,UAAUP,IAAV,EAAgBQ,YAAhB,EAA8BC,aAA9B,EAA6C;AAC/E,WAAOT,IAAI,CAACI,IAAZ;AACH,GAFD;;AAGAP,EAAAA,kBAAkB,CAACL,SAAnB,CAA6BkB,YAA7B,GAA4C,UAAUV,IAAV,EAAgBQ,YAAhB,EAA8B;AACtE,WAAOR,IAAI,CAACW,SAAL,GAAiBX,IAAI,CAACW,SAAtB,GAAkC,EAAzC;AACH,GAFD;;AAGA,SAAOd,kBAAP;AACH,CAjByB,EAA1B;;AAkBA,SAASA,kBAAT","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { getCellProperty } from '../Functions/getCellProperty';\nvar HeaderCellTemplate = (function () {\n    function HeaderCellTemplate() {\n        this.isFocusable = function () { return false; };\n        this.getStyle = function (cell) { return ({ background: 'rgba(0, 0, 0, 0.20)' }); };\n    }\n    HeaderCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n        var text = getCellProperty(uncertainCell, 'text', 'string');\n        var value = parseFloat(text);\n        return __assign({}, uncertainCell, { text: text, value: value });\n    };\n    HeaderCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n        return cell.text;\n    };\n    HeaderCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n        return cell.className ? cell.className : '';\n    };\n    return HeaderCellTemplate;\n}());\nexport { HeaderCellTemplate };\n"]},"metadata":{},"sourceType":"module"}