{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { newLocation } from './newLocation';\nexport function updateSelectedRows(state) {\n  var firstCol = state.cellMatrix.first.column;\n  var lastCol = state.cellMatrix.last.column;\n  var updatedRows = state.cellMatrix.rows.filter(function (r) {\n    return state.selectedIds.includes(r.rowId);\n  }).sort(function (a, b) {\n    return a.idx - b.idx;\n  });\n  var rows = groupedRows(updatedRows);\n  var ranges = rows.map(function (row) {\n    return state.cellMatrix.getRange(newLocation(row[0], firstCol), newLocation(row[row.length - 1], lastCol));\n  });\n  var activeSelectedRangeIdx = state.selectedRanges.length - 1;\n\n  if (state.focusedLocation) {\n    ranges.forEach(function (range, idx) {\n      range.rows.forEach(function (row) {\n        if (state.focusedLocation.row.rowId === row.rowId) {\n          activeSelectedRangeIdx = idx;\n        }\n      });\n    });\n  }\n\n  return __assign({}, state, {\n    selectionMode: 'row',\n    activeSelectedRangeIdx: activeSelectedRangeIdx,\n    selectedRanges: ranges.slice(),\n    selectedIndexes: updatedRows.map(function (row) {\n      return row.idx;\n    }),\n    selectedIds: updatedRows.map(function (row) {\n      return row.rowId;\n    })\n  });\n}\nexport function updateSelectedColumns(state) {\n  var firstRow = state.cellMatrix.first.row;\n  var lastRow = state.cellMatrix.last.row;\n  var updatedColumns = state.cellMatrix.columns.filter(function (r) {\n    return state.selectedIds.includes(r.columnId);\n  }).sort(function (a, b) {\n    return a.idx - b.idx;\n  });\n  var columns = groupedColumns(updatedColumns);\n  var ranges = columns.map(function (arr) {\n    return state.cellMatrix.getRange(newLocation(firstRow, arr[0]), newLocation(lastRow, arr[arr.length - 1]));\n  });\n  var activeSelectedRangeIdx = state.selectedRanges.length - 1;\n\n  if (state.focusedLocation) {\n    ranges.forEach(function (range, idx) {\n      range.columns.forEach(function (col) {\n        if (state.focusedLocation.column.columnId === col.columnId) {\n          activeSelectedRangeIdx = idx;\n        }\n      });\n    });\n  }\n\n  return __assign({}, state, {\n    selectionMode: 'column',\n    activeSelectedRangeIdx: activeSelectedRangeIdx,\n    selectedRanges: ranges.slice(),\n    selectedIndexes: updatedColumns.map(function (col) {\n      return col.idx;\n    }),\n    selectedIds: updatedColumns.map(function (col) {\n      return col.columnId;\n    })\n  });\n}\n\nvar groupedRows = function (array) {\n  var grouped = [];\n  var sortIndex = 0;\n  array.forEach(function (current, index) {\n    if (!array[index - 1]) {\n      grouped.push([current]);\n      return;\n    }\n\n    var prev = array[index - 1];\n\n    if (current.idx - prev.idx == 1) {\n      if (!grouped[sortIndex]) {\n        grouped.push([prev, current]);\n      } else {\n        grouped[sortIndex].push(current);\n      }\n    } else {\n      grouped.push([current]);\n      sortIndex += 1;\n    }\n  });\n  return grouped;\n};\n\nvar groupedColumns = function (array) {\n  var grouped = [];\n  var sortIndex = 0;\n  array.forEach(function (current, index) {\n    if (!array[index - 1]) {\n      grouped.push([current]);\n      return;\n    }\n\n    var prev = array[index - 1];\n\n    if (current.idx - prev.idx == 1) {\n      if (!grouped[sortIndex]) {\n        grouped.push([prev, current]);\n      } else {\n        grouped[sortIndex].push(current);\n      }\n    } else {\n      grouped.push([current]);\n      sortIndex += 1;\n    }\n  });\n  return grouped;\n};","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/Functions/updateState.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","newLocation","updateSelectedRows","state","firstCol","cellMatrix","first","column","lastCol","last","updatedRows","rows","filter","r","selectedIds","includes","rowId","sort","a","b","idx","groupedRows","ranges","map","row","getRange","activeSelectedRangeIdx","selectedRanges","focusedLocation","forEach","range","selectionMode","slice","selectedIndexes","updateSelectedColumns","firstRow","lastRow","updatedColumns","columns","columnId","groupedColumns","arr","col","array","grouped","sortIndex","current","index","push","prev"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { newLocation } from './newLocation';\nexport function updateSelectedRows(state) {\n    var firstCol = state.cellMatrix.first.column;\n    var lastCol = state.cellMatrix.last.column;\n    var updatedRows = state.cellMatrix.rows.filter(function (r) { return state.selectedIds.includes(r.rowId); }).sort(function (a, b) { return a.idx - b.idx; });\n    var rows = groupedRows(updatedRows);\n    var ranges = rows.map(function (row) { return state.cellMatrix.getRange(newLocation(row[0], firstCol), newLocation(row[row.length - 1], lastCol)); });\n    var activeSelectedRangeIdx = state.selectedRanges.length - 1;\n    if (state.focusedLocation) {\n        ranges.forEach(function (range, idx) {\n            range.rows.forEach(function (row) {\n                if (state.focusedLocation.row.rowId === row.rowId) {\n                    activeSelectedRangeIdx = idx;\n                }\n            });\n        });\n    }\n    return __assign({}, state, { selectionMode: 'row', activeSelectedRangeIdx: activeSelectedRangeIdx, selectedRanges: ranges.slice(), selectedIndexes: updatedRows.map(function (row) { return row.idx; }), selectedIds: updatedRows.map(function (row) { return row.rowId; }) });\n}\nexport function updateSelectedColumns(state) {\n    var firstRow = state.cellMatrix.first.row;\n    var lastRow = state.cellMatrix.last.row;\n    var updatedColumns = state.cellMatrix.columns.filter(function (r) { return state.selectedIds.includes(r.columnId); }).sort(function (a, b) { return a.idx - b.idx; });\n    var columns = groupedColumns(updatedColumns);\n    var ranges = columns.map(function (arr) { return state.cellMatrix.getRange(newLocation(firstRow, arr[0]), newLocation(lastRow, arr[arr.length - 1])); });\n    var activeSelectedRangeIdx = state.selectedRanges.length - 1;\n    if (state.focusedLocation) {\n        ranges.forEach(function (range, idx) {\n            range.columns.forEach(function (col) {\n                if (state.focusedLocation.column.columnId === col.columnId) {\n                    activeSelectedRangeIdx = idx;\n                }\n            });\n        });\n    }\n    return __assign({}, state, { selectionMode: 'column', activeSelectedRangeIdx: activeSelectedRangeIdx, selectedRanges: ranges.slice(), selectedIndexes: updatedColumns.map(function (col) { return col.idx; }), selectedIds: updatedColumns.map(function (col) { return col.columnId; }) });\n}\nvar groupedRows = function (array) {\n    var grouped = [];\n    var sortIndex = 0;\n    array.forEach(function (current, index) {\n        if (!array[index - 1]) {\n            grouped.push([current]);\n            return;\n        }\n        var prev = array[index - 1];\n        if (current.idx - prev.idx == 1) {\n            if (!grouped[sortIndex]) {\n                grouped.push([prev, current]);\n            }\n            else {\n                grouped[sortIndex].push(current);\n            }\n        }\n        else {\n            grouped.push([current]);\n            sortIndex += 1;\n        }\n    });\n    return grouped;\n};\nvar groupedColumns = function (array) {\n    var grouped = [];\n    var sortIndex = 0;\n    array.forEach(function (current, index) {\n        if (!array[index - 1]) {\n            grouped.push([current]);\n            return;\n        }\n        var prev = array[index - 1];\n        if (current.idx - prev.idx == 1) {\n            if (!grouped[sortIndex]) {\n                grouped.push([prev, current]);\n            }\n            else {\n                grouped[sortIndex].push(current);\n            }\n        }\n        else {\n            grouped.push([current]);\n            sortIndex += 1;\n        }\n    });\n    return grouped;\n};\n"]},"metadata":{},"sourceType":"module"}