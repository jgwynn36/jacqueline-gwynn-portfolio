import { isBrowserIE, isBrowserEdge } from '../Functions';
import { ResizeColumnBehavior } from '../Behaviors/ResizeColumnBehavior';
export function scrollIntoView(state, location, direction) {
    if (direction === void 0) { direction = 'both'; }
    var top = getScrollTop(state, location, direction === 'horizontal');
    var left = getScrollLeft(state, location, direction === 'vertical');
    if (isBrowserIE() || isBrowserEdge()) {
        state.hiddenScrollableElement.scrollTop = top;
        state.hiddenScrollableElement.scrollLeft = left;
    }
    else {
        state.viewportElement.scrollTop = top;
        state.viewportElement.scrollLeft = left;
    }
}
function getScrollTop(state, location, dontChange) {
    var row = location.row;
    var _a = state.viewportElement, scrollTop = _a.scrollTop, clientHeight = _a.clientHeight;
    var _b = state.cellMatrix, frozenTopRange = _b.frozenTopRange, frozenBottomRange = _b.frozenBottomRange, rows = _b.rows;
    if (dontChange || !row)
        return scrollTop;
    var visibleContentHeight = Math.min(clientHeight, state.cellMatrix.height);
    var visibleScrollAreaHeight = visibleContentHeight - frozenTopRange.height - frozenBottomRange.height;
    var hasTopFrozens = function () { return frozenTopRange.rows.length > 0; };
    var hasBottomFrozens = function () { return frozenBottomRange.rows.length > 0; };
    var isFocusLocationOnTopFrozen = function () { return hasTopFrozens() && row.idx <= frozenTopRange.last.row.idx; };
    var isFocusLocationOnBottomFrozen = function () { return hasBottomFrozens() && row.idx >= frozenBottomRange.first.row.idx; };
    if (isFocusLocationOnTopFrozen() || isFocusLocationOnBottomFrozen()) {
        return scrollTop;
    }
    var isBottomRowFrozen = function () { return frozenBottomRange.rows.some(function (r) { return row.idx === r.idx; }); };
    var isRowBelowBottomPane = function () { return row.bottom > visibleScrollAreaHeight + scrollTop; };
    var isRowBelowTopPane = function () { return row.top < scrollTop && !isBottomRowFrozen(); };
    var isLastRow = function () { return state.cellMatrix.last.row.idx === row.idx; };
    var shouldScrollToTop = function () { return row.top + (location.cellY ? location.cellY : 0) < scrollTop + 1 && !isLastRow() &&
        !isFocusLocationOnBottomFrozen() || isFocusLocationOnTopFrozen() || isRowBelowTopPane(); };
    var shouldScrollToBottom = function () { return (location.cellY ? row.top + location.cellY : row.bottom) > visibleScrollAreaHeight + scrollTop - 4 ||
        isFocusLocationOnBottomFrozen() || isLastRow() || isRowBelowBottomPane(); };
    if (shouldScrollToTop()) {
        if (hasTopFrozens() || !location.cellY) {
            return row.top - 1;
        }
        else {
            return rows[row.idx].top - 1;
        }
    }
    if (shouldScrollToBottom()) {
        if (hasBottomFrozens() || location.cellY) {
            return rows[row.idx].bottom - visibleScrollAreaHeight + 1;
        }
        else {
            return row.bottom - visibleScrollAreaHeight + 1;
        }
    }
    return scrollTop;
}
function getScrollLeft(state, location, dontChange) {
    var column = location.column;
    var _a = state.viewportElement, scrollLeft = _a.scrollLeft, clientWidth = _a.clientWidth;
    var _b = state.cellMatrix, frozenLeftRange = _b.frozenLeftRange, frozenRightRange = _b.frozenRightRange, cols = _b.columns;
    if (dontChange || !column)
        return scrollLeft;
    var visibleContentWidth = Math.min(clientWidth, state.cellMatrix.width);
    var visibleScrollAreaWidth = visibleContentWidth - frozenLeftRange.width - frozenRightRange.width;
    var hasLeftFrozens = function () { return frozenLeftRange.columns.length > 0; };
    var hasRightFrozens = function () { return frozenRightRange.columns.length > 0; };
    var isFocusLocationOnLeftFrozen = function () { return hasLeftFrozens() && column.idx <= frozenLeftRange.last.column.idx; };
    var isFocusLocationOnRightFrozen = function () { return hasRightFrozens() && column.idx >= frozenRightRange.first.column.idx; };
    var isColumnResizing = function () { return state.currentBehavior instanceof ResizeColumnBehavior; };
    if (isFocusLocationOnLeftFrozen() || isFocusLocationOnRightFrozen() || isColumnResizing()) {
        return scrollLeft;
    }
    var isRightColumnFrozen = function () { return frozenRightRange.columns.some(function (r) { return column.idx === r.idx; }); };
    var isColumnBelowRightPane = function () { return column.right > visibleScrollAreaWidth + scrollLeft; };
    var isColumnBelowLeftPane = function () { return column.left < scrollLeft && !isRightColumnFrozen(); };
    var isLastColumn = function () { return state.cellMatrix.last.column.idx === column.idx; };
    var shouldScrollToLeft = function () { return column.left + (location.cellX ? location.cellX : 0) < scrollLeft + 1 && !isLastColumn() &&
        !isFocusLocationOnRightFrozen() || isFocusLocationOnLeftFrozen() || isColumnBelowLeftPane(); };
    var shouldScrollToRight = function () { return (location.cellX ? column.left + location.cellX : column.right) > visibleScrollAreaWidth + scrollLeft - 4 ||
        isFocusLocationOnRightFrozen() || isLastColumn() || isColumnBelowRightPane(); };
    if (shouldScrollToLeft()) {
        if (hasLeftFrozens() || !location.cellX) {
            return column.left - 1;
        }
        else {
            return cols[column.idx].left - 1;
        }
    }
    if (shouldScrollToRight()) {
        if (hasRightFrozens() || location.cellX) {
            return cols[column.idx].right - visibleScrollAreaWidth + 1;
        }
        else {
            return column.right - visibleScrollAreaWidth + 1;
        }
    }
    return scrollLeft;
}
