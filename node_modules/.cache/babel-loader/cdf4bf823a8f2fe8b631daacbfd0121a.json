{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { getCompatibleCellAndTemplate } from './getCompatibleCellAndTemplate';\nexport function tryAppendChange(state, location, cell) {\n  var _a = getCompatibleCellAndTemplate(state, location),\n      initialCell = _a.cell,\n      cellTemplate = _a.cellTemplate;\n\n  if (initialCell === cell || JSON.stringify(initialCell) === JSON.stringify(cell) || cellTemplate.update === undefined) return state;\n  var newCell = cellTemplate.update(initialCell, cell);\n  if (newCell !== initialCell || JSON.stringify(newCell) !== JSON.stringify(initialCell)) state.queuedCellChanges.push({\n    initialCell: initialCell,\n    newCell: newCell,\n    rowId: location.row.rowId,\n    columnId: location.column.columnId\n  });\n  return __assign({}, state);\n}","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/Functions/tryAppendChange.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","getCompatibleCellAndTemplate","tryAppendChange","state","location","cell","_a","initialCell","cellTemplate","JSON","stringify","update","undefined","newCell","queuedCellChanges","push","rowId","row","columnId","column"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,4BAAT,QAA6C,gCAA7C;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,IAA1C,EAAgD;AACnD,MAAIC,EAAE,GAAGL,4BAA4B,CAACE,KAAD,EAAQC,QAAR,CAArC;AAAA,MAAwDG,WAAW,GAAGD,EAAE,CAACD,IAAzE;AAAA,MAA+EG,YAAY,GAAGF,EAAE,CAACE,YAAjG;;AACA,MAAID,WAAW,KAAKF,IAAhB,IAAwBI,IAAI,CAACC,SAAL,CAAeH,WAAf,MAAgCE,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAxD,IAAgFG,YAAY,CAACG,MAAb,KAAwBC,SAA5G,EACI,OAAOT,KAAP;AACJ,MAAIU,OAAO,GAAGL,YAAY,CAACG,MAAb,CAAoBJ,WAApB,EAAiCF,IAAjC,CAAd;AACA,MAAIQ,OAAO,KAAKN,WAAZ,IAA2BE,IAAI,CAACC,SAAL,CAAeG,OAAf,MAA4BJ,IAAI,CAACC,SAAL,CAAeH,WAAf,CAA3D,EACIJ,KAAK,CAACW,iBAAN,CAAwBC,IAAxB,CAA6B;AACzBR,IAAAA,WAAW,EAAEA,WADY;AAEzBM,IAAAA,OAAO,EAAEA,OAFgB;AAGzBG,IAAAA,KAAK,EAAEZ,QAAQ,CAACa,GAAT,CAAaD,KAHK;AAIzBE,IAAAA,QAAQ,EAAEd,QAAQ,CAACe,MAAT,CAAgBD;AAJD,GAA7B;AAMJ,SAAO/B,QAAQ,CAAC,EAAD,EAAKgB,KAAL,CAAf;AACH","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { getCompatibleCellAndTemplate } from './getCompatibleCellAndTemplate';\nexport function tryAppendChange(state, location, cell) {\n    var _a = getCompatibleCellAndTemplate(state, location), initialCell = _a.cell, cellTemplate = _a.cellTemplate;\n    if (initialCell === cell || JSON.stringify(initialCell) === JSON.stringify(cell) || cellTemplate.update === undefined)\n        return state;\n    var newCell = cellTemplate.update(initialCell, cell);\n    if (newCell !== initialCell || JSON.stringify(newCell) !== JSON.stringify(initialCell))\n        state.queuedCellChanges.push({\n            initialCell: initialCell,\n            newCell: newCell,\n            rowId: location.row.rowId,\n            columnId: location.column.columnId\n        });\n    return __assign({}, state);\n}\n"]},"metadata":{},"sourceType":"module"}