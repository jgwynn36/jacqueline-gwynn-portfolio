{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { keyCodes } from '../Functions/keyCodes';\nimport { getCellProperty } from '../Functions/getCellProperty';\n\nvar CheckboxCellTemplate = function () {\n  function CheckboxCellTemplate() {}\n\n  CheckboxCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n    var checked = getCellProperty(uncertainCell, 'checked', 'boolean');\n    var text = checked ? uncertainCell.checkedText ? uncertainCell.checkedText : '1' : uncertainCell.uncheckedText ? uncertainCell.uncheckedText : '';\n    return __assign({}, uncertainCell, {\n      checked: checked,\n      value: checked ? 1 : NaN,\n      text: text\n    });\n  };\n\n  CheckboxCellTemplate.prototype.handleKeyDown = function (cell, keyCode, ctrl, shift, alt) {\n    if (keyCode === keyCodes.SPACE || keyCode === keyCodes.ENTER) return {\n      cell: this.getCompatibleCell(this.toggleCheckboxCell(cell)),\n      enableEditMode: false\n    };\n    return {\n      cell: cell,\n      enableEditMode: false\n    };\n  };\n\n  CheckboxCellTemplate.prototype.toggleCheckboxCell = function (cell) {\n    return this.getCompatibleCell(__assign({}, cell, {\n      checked: !cell.checked\n    }));\n  };\n\n  CheckboxCellTemplate.prototype.update = function (cell, cellToMerge) {\n    var checked = cellToMerge.type === 'checkbox' ? cellToMerge.checked : !!cellToMerge.value;\n    return this.getCompatibleCell(__assign({}, cell, {\n      checked: checked\n    }));\n  };\n\n  CheckboxCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n    return cell.className ? cell.className : '';\n  };\n\n  CheckboxCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n    var _this = this;\n\n    return React.createElement(React.Fragment, null, React.createElement(\"label\", null, React.createElement(\"input\", {\n      type: \"checkbox\",\n      checked: cell.checked,\n      onChange: function (e) {\n        return onCellChanged(_this.toggleCheckboxCell(cell), true);\n      }\n    }), React.createElement(\"span\", null)));\n  };\n\n  return CheckboxCellTemplate;\n}();\n\nexport { CheckboxCellTemplate };","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/CellTemplates/CheckboxCellTemplate.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","keyCodes","getCellProperty","CheckboxCellTemplate","getCompatibleCell","uncertainCell","checked","text","checkedText","uncheckedText","value","NaN","handleKeyDown","cell","keyCode","ctrl","shift","alt","SPACE","ENTER","toggleCheckboxCell","enableEditMode","update","cellToMerge","type","getClassName","isInEditMode","className","render","onCellChanged","_this","createElement","Fragment","onChange","e"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,OAAO,KAAKO,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AACA,IAAIC,oBAAoB,GAAI,YAAY;AACpC,WAASA,oBAAT,GAAgC,CAC/B;;AACDA,EAAAA,oBAAoB,CAACP,SAArB,CAA+BQ,iBAA/B,GAAmD,UAAUC,aAAV,EAAyB;AACxE,QAAIC,OAAO,GAAGJ,eAAe,CAACG,aAAD,EAAgB,SAAhB,EAA2B,SAA3B,CAA7B;AACA,QAAIE,IAAI,GAAGD,OAAO,GACdD,aAAa,CAACG,WAAd,GAA4BH,aAAa,CAACG,WAA1C,GAAwD,GAD1C,GAEdH,aAAa,CAACI,aAAd,GAA8BJ,aAAa,CAACI,aAA5C,GAA4D,EAFhE;AAGA,WAAOvB,QAAQ,CAAC,EAAD,EAAKmB,aAAL,EAAoB;AAAEC,MAAAA,OAAO,EAAEA,OAAX;AAAoBI,MAAAA,KAAK,EAAEJ,OAAO,GAAG,CAAH,GAAOK,GAAzC;AAA8CJ,MAAAA,IAAI,EAAEA;AAApD,KAApB,CAAf;AACH,GAND;;AAOAJ,EAAAA,oBAAoB,CAACP,SAArB,CAA+BgB,aAA/B,GAA+C,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,IAAzB,EAA+BC,KAA/B,EAAsCC,GAAtC,EAA2C;AACtF,QAAIH,OAAO,KAAKb,QAAQ,CAACiB,KAArB,IAA8BJ,OAAO,KAAKb,QAAQ,CAACkB,KAAvD,EACI,OAAO;AAAEN,MAAAA,IAAI,EAAE,KAAKT,iBAAL,CAAuB,KAAKgB,kBAAL,CAAwBP,IAAxB,CAAvB,CAAR;AAA+DQ,MAAAA,cAAc,EAAE;AAA/E,KAAP;AACJ,WAAO;AAAER,MAAAA,IAAI,EAAEA,IAAR;AAAcQ,MAAAA,cAAc,EAAE;AAA9B,KAAP;AACH,GAJD;;AAKAlB,EAAAA,oBAAoB,CAACP,SAArB,CAA+BwB,kBAA/B,GAAoD,UAAUP,IAAV,EAAgB;AAChE,WAAO,KAAKT,iBAAL,CAAuBlB,QAAQ,CAAC,EAAD,EAAK2B,IAAL,EAAW;AAAEP,MAAAA,OAAO,EAAE,CAACO,IAAI,CAACP;AAAjB,KAAX,CAA/B,CAAP;AACH,GAFD;;AAGAH,EAAAA,oBAAoB,CAACP,SAArB,CAA+B0B,MAA/B,GAAwC,UAAUT,IAAV,EAAgBU,WAAhB,EAA6B;AACjE,QAAIjB,OAAO,GAAGiB,WAAW,CAACC,IAAZ,KAAqB,UAArB,GAAkCD,WAAW,CAACjB,OAA9C,GAAwD,CAAC,CAACiB,WAAW,CAACb,KAApF;AACA,WAAO,KAAKN,iBAAL,CAAuBlB,QAAQ,CAAC,EAAD,EAAK2B,IAAL,EAAW;AAAEP,MAAAA,OAAO,EAAEA;AAAX,KAAX,CAA/B,CAAP;AACH,GAHD;;AAIAH,EAAAA,oBAAoB,CAACP,SAArB,CAA+B6B,YAA/B,GAA8C,UAAUZ,IAAV,EAAgBa,YAAhB,EAA8B;AACxE,WAAOb,IAAI,CAACc,SAAL,GAAiBd,IAAI,CAACc,SAAtB,GAAkC,EAAzC;AACH,GAFD;;AAGAxB,EAAAA,oBAAoB,CAACP,SAArB,CAA+BgC,MAA/B,GAAwC,UAAUf,IAAV,EAAgBa,YAAhB,EAA8BG,aAA9B,EAA6C;AACjF,QAAIC,KAAK,GAAG,IAAZ;;AACA,WAAQ9B,KAAK,CAAC+B,aAAN,CAAoB/B,KAAK,CAACgC,QAA1B,EAAoC,IAApC,EACJhC,KAAK,CAAC+B,aAAN,CAAoB,OAApB,EAA6B,IAA7B,EACI/B,KAAK,CAAC+B,aAAN,CAAoB,OAApB,EAA6B;AAAEP,MAAAA,IAAI,EAAE,UAAR;AAAoBlB,MAAAA,OAAO,EAAEO,IAAI,CAACP,OAAlC;AAA2C2B,MAAAA,QAAQ,EAAE,UAAUC,CAAV,EAAa;AAAE,eAAOL,aAAa,CAACC,KAAK,CAACV,kBAAN,CAAyBP,IAAzB,CAAD,EAAiC,IAAjC,CAApB;AAA6D;AAAjI,KAA7B,CADJ,EAEIb,KAAK,CAAC+B,aAAN,CAAoB,MAApB,EAA4B,IAA5B,CAFJ,CADI,CAAR;AAIH,GAND;;AAOA,SAAO5B,oBAAP;AACH,CAjC2B,EAA5B;;AAkCA,SAASA,oBAAT","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { keyCodes } from '../Functions/keyCodes';\nimport { getCellProperty } from '../Functions/getCellProperty';\nvar CheckboxCellTemplate = (function () {\n    function CheckboxCellTemplate() {\n    }\n    CheckboxCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n        var checked = getCellProperty(uncertainCell, 'checked', 'boolean');\n        var text = checked ?\n            uncertainCell.checkedText ? uncertainCell.checkedText : '1' :\n            uncertainCell.uncheckedText ? uncertainCell.uncheckedText : '';\n        return __assign({}, uncertainCell, { checked: checked, value: checked ? 1 : NaN, text: text });\n    };\n    CheckboxCellTemplate.prototype.handleKeyDown = function (cell, keyCode, ctrl, shift, alt) {\n        if (keyCode === keyCodes.SPACE || keyCode === keyCodes.ENTER)\n            return { cell: this.getCompatibleCell(this.toggleCheckboxCell(cell)), enableEditMode: false };\n        return { cell: cell, enableEditMode: false };\n    };\n    CheckboxCellTemplate.prototype.toggleCheckboxCell = function (cell) {\n        return this.getCompatibleCell(__assign({}, cell, { checked: !cell.checked }));\n    };\n    CheckboxCellTemplate.prototype.update = function (cell, cellToMerge) {\n        var checked = cellToMerge.type === 'checkbox' ? cellToMerge.checked : !!cellToMerge.value;\n        return this.getCompatibleCell(__assign({}, cell, { checked: checked }));\n    };\n    CheckboxCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n        return cell.className ? cell.className : '';\n    };\n    CheckboxCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n        var _this = this;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"label\", null,\n                React.createElement(\"input\", { type: \"checkbox\", checked: cell.checked, onChange: function (e) { return onCellChanged(_this.toggleCheckboxCell(cell), true); } }),\n                React.createElement(\"span\", null))));\n    };\n    return CheckboxCellTemplate;\n}());\nexport { CheckboxCellTemplate };\n"]},"metadata":{},"sourceType":"module"}