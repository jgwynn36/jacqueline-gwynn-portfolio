{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport { keyCodes } from '../Functions/keyCodes';\nimport { isAlphaNumericKey, isNavigationKey } from './keyCodeCheckings';\nimport { getCellProperty } from '../Functions/getCellProperty';\nimport { getCharFromKeyCode } from './getCharFromKeyCode';\n\nvar TextCellTemplate = function () {\n  function TextCellTemplate() {}\n\n  TextCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n    var text = getCellProperty(uncertainCell, 'text', 'string');\n    var value = parseFloat(text);\n    return __assign({}, uncertainCell, {\n      text: text,\n      value: value\n    });\n  };\n\n  TextCellTemplate.prototype.update = function (cell, cellToMerge) {\n    return this.getCompatibleCell(__assign({}, cell, {\n      text: cellToMerge.text\n    }));\n  };\n\n  TextCellTemplate.prototype.handleKeyDown = function (cell, keyCode, ctrl, shift, alt) {\n    var char = getCharFromKeyCode(keyCode, shift);\n    if (!ctrl && !alt && isAlphaNumericKey(keyCode)) return {\n      cell: this.getCompatibleCell(__assign({}, cell, {\n        text: shift ? char : char.toLowerCase()\n      })),\n      enableEditMode: true\n    };\n    return {\n      cell: cell,\n      enableEditMode: keyCode === keyCodes.POINTER || keyCode === keyCodes.ENTER\n    };\n  };\n\n  TextCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n    var isValid = cell.validator ? cell.validator(cell.text) : true;\n    var className = cell.className ? cell.className : '';\n    return (isValid ? 'valid' : 'invalid') + \" \" + className;\n  };\n\n  TextCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n    var _this = this;\n\n    if (!isInEditMode) return cell.renderer ? cell.renderer(cell.text) : cell.text;\n    return React.createElement(\"input\", {\n      ref: function (input) {\n        if (input) {\n          input.focus();\n          input.setSelectionRange(input.value.length, input.value.length);\n        }\n      },\n      defaultValue: cell.text,\n      onChange: function (e) {\n        return onCellChanged(_this.getCompatibleCell(__assign({}, cell, {\n          text: e.currentTarget.value\n        })), false);\n      },\n      onBlur: function (e) {\n        return onCellChanged(_this.getCompatibleCell(__assign({}, cell, {\n          text: e.currentTarget.value\n        })), true);\n      },\n      onCopy: function (e) {\n        return e.stopPropagation();\n      },\n      onCut: function (e) {\n        return e.stopPropagation();\n      },\n      onPaste: function (e) {\n        return e.stopPropagation();\n      },\n      onPointerDown: function (e) {\n        return e.stopPropagation();\n      },\n      onKeyDown: function (e) {\n        if (isAlphaNumericKey(e.keyCode) || isNavigationKey(e.keyCode)) e.stopPropagation();\n      }\n    });\n  };\n\n  return TextCellTemplate;\n}();\n\nexport { TextCellTemplate };","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/CellTemplates/TextCellTemplate.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","keyCodes","isAlphaNumericKey","isNavigationKey","getCellProperty","getCharFromKeyCode","TextCellTemplate","getCompatibleCell","uncertainCell","text","value","parseFloat","update","cell","cellToMerge","handleKeyDown","keyCode","ctrl","shift","alt","char","toLowerCase","enableEditMode","POINTER","ENTER","getClassName","isInEditMode","isValid","validator","className","render","onCellChanged","_this","renderer","createElement","ref","input","focus","setSelectionRange","defaultValue","onChange","e","currentTarget","onBlur","onCopy","stopPropagation","onCut","onPaste","onPointerDown","onKeyDown"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { keyCodes } from '../Functions/keyCodes';\nimport { isAlphaNumericKey, isNavigationKey } from './keyCodeCheckings';\nimport { getCellProperty } from '../Functions/getCellProperty';\nimport { getCharFromKeyCode } from './getCharFromKeyCode';\nvar TextCellTemplate = (function () {\n    function TextCellTemplate() {\n    }\n    TextCellTemplate.prototype.getCompatibleCell = function (uncertainCell) {\n        var text = getCellProperty(uncertainCell, 'text', 'string');\n        var value = parseFloat(text);\n        return __assign({}, uncertainCell, { text: text, value: value });\n    };\n    TextCellTemplate.prototype.update = function (cell, cellToMerge) {\n        return this.getCompatibleCell(__assign({}, cell, { text: cellToMerge.text }));\n    };\n    TextCellTemplate.prototype.handleKeyDown = function (cell, keyCode, ctrl, shift, alt) {\n        var char = getCharFromKeyCode(keyCode, shift);\n        if (!ctrl && !alt && isAlphaNumericKey(keyCode))\n            return { cell: this.getCompatibleCell(__assign({}, cell, { text: shift ? char : char.toLowerCase() })), enableEditMode: true };\n        return { cell: cell, enableEditMode: keyCode === keyCodes.POINTER || keyCode === keyCodes.ENTER };\n    };\n    TextCellTemplate.prototype.getClassName = function (cell, isInEditMode) {\n        var isValid = cell.validator ? cell.validator(cell.text) : true;\n        var className = cell.className ? cell.className : '';\n        return (isValid ? 'valid' : 'invalid') + \" \" + className;\n    };\n    TextCellTemplate.prototype.render = function (cell, isInEditMode, onCellChanged) {\n        var _this = this;\n        if (!isInEditMode)\n            return cell.renderer ? cell.renderer(cell.text) : cell.text;\n        return React.createElement(\"input\", { ref: function (input) {\n                if (input) {\n                    input.focus();\n                    input.setSelectionRange(input.value.length, input.value.length);\n                }\n            }, defaultValue: cell.text, onChange: function (e) { return onCellChanged(_this.getCompatibleCell(__assign({}, cell, { text: e.currentTarget.value })), false); }, onBlur: function (e) { return onCellChanged(_this.getCompatibleCell(__assign({}, cell, { text: e.currentTarget.value })), true); }, onCopy: function (e) { return e.stopPropagation(); }, onCut: function (e) { return e.stopPropagation(); }, onPaste: function (e) { return e.stopPropagation(); }, onPointerDown: function (e) { return e.stopPropagation(); }, onKeyDown: function (e) {\n                if (isAlphaNumericKey(e.keyCode) || (isNavigationKey(e.keyCode)))\n                    e.stopPropagation();\n            } });\n    };\n    return TextCellTemplate;\n}());\nexport { TextCellTemplate };\n"]},"metadata":{},"sourceType":"module"}