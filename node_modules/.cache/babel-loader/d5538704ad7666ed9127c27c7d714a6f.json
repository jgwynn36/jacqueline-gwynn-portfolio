{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { scrollIntoView } from './scrollIntoView';\nimport { tryAppendChange } from './tryAppendChange';\nimport { getCompatibleCellAndTemplate } from './getCompatibleCellAndTemplate';\nexport function focusLocation(state, location, resetSelection) {\n  if (resetSelection === void 0) {\n    resetSelection = true;\n  }\n\n  scrollIntoView(state, location);\n\n  if (state.focusedLocation && state.currentlyEditedCell) {\n    state = tryAppendChange(state, state.focusedLocation, state.currentlyEditedCell);\n  }\n\n  var _a = getCompatibleCellAndTemplate(state, location),\n      cell = _a.cell,\n      cellTemplate = _a.cellTemplate;\n\n  var isFocusable = !cellTemplate.isFocusable || cellTemplate.isFocusable(cell);\n  if (!isFocusable) return state;\n  state.props.onFocusLocationChanged && state.props.onFocusLocationChanged({\n    rowId: location.row.rowId,\n    columnId: location.column.columnId\n  });\n  if (resetSelection) state = __assign({}, state, {\n    activeSelectedRangeIdx: 0,\n    selectedRanges: [state.cellMatrix.getRange(location, location)],\n    selectedIndexes: [],\n    selectedIds: [],\n    selectionMode: 'range'\n  });\n  return __assign({}, state, {\n    contextMenuPosition: {\n      top: -1,\n      left: -1\n    },\n    focusedLocation: location,\n    currentlyEditedCell: undefined\n  });\n}","map":{"version":3,"sources":["/Users/jacquelinegwynn/jacquelinegwynn-portfolio/node_modules/@silevis/reactgrid/dist/lib/Functions/focusLocation.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","scrollIntoView","tryAppendChange","getCompatibleCellAndTemplate","focusLocation","state","location","resetSelection","focusedLocation","currentlyEditedCell","_a","cell","cellTemplate","isFocusable","props","onFocusLocationChanged","rowId","row","columnId","column","activeSelectedRangeIdx","selectedRanges","cellMatrix","getRange","selectedIndexes","selectedIds","selectionMode","contextMenuPosition","top","left","undefined"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;AAClDA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;AACpC,SAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;AACjDD,MAAAA,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;AACA,WAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;AACP;;AACD,WAAON,CAAP;AACH,GAPD;;AAQA,SAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,cAAT,QAA+B,kBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,4BAAT,QAA6C,gCAA7C;AACA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAwCC,cAAxC,EAAwD;AAC3D,MAAIA,cAAc,KAAK,KAAK,CAA5B,EAA+B;AAAEA,IAAAA,cAAc,GAAG,IAAjB;AAAwB;;AACzDN,EAAAA,cAAc,CAACI,KAAD,EAAQC,QAAR,CAAd;;AACA,MAAID,KAAK,CAACG,eAAN,IAAyBH,KAAK,CAACI,mBAAnC,EAAwD;AACpDJ,IAAAA,KAAK,GAAGH,eAAe,CAACG,KAAD,EAAQA,KAAK,CAACG,eAAd,EAA+BH,KAAK,CAACI,mBAArC,CAAvB;AACH;;AACD,MAAIC,EAAE,GAAGP,4BAA4B,CAACE,KAAD,EAAQC,QAAR,CAArC;AAAA,MAAwDK,IAAI,GAAGD,EAAE,CAACC,IAAlE;AAAA,MAAwEC,YAAY,GAAGF,EAAE,CAACE,YAA1F;;AACA,MAAIC,WAAW,GAAG,CAACD,YAAY,CAACC,WAAd,IAA6BD,YAAY,CAACC,WAAb,CAAyBF,IAAzB,CAA/C;AACA,MAAI,CAACE,WAAL,EACI,OAAOR,KAAP;AACJA,EAAAA,KAAK,CAACS,KAAN,CAAYC,sBAAZ,IAAsCV,KAAK,CAACS,KAAN,CAAYC,sBAAZ,CAAmC;AAAEC,IAAAA,KAAK,EAAEV,QAAQ,CAACW,GAAT,CAAaD,KAAtB;AAA6BE,IAAAA,QAAQ,EAAEZ,QAAQ,CAACa,MAAT,CAAgBD;AAAvD,GAAnC,CAAtC;AACA,MAAIX,cAAJ,EACIF,KAAK,GAAGlB,QAAQ,CAAC,EAAD,EAAKkB,KAAL,EAAY;AAAEe,IAAAA,sBAAsB,EAAE,CAA1B;AAA6BC,IAAAA,cAAc,EAAE,CAAChB,KAAK,CAACiB,UAAN,CAAiBC,QAAjB,CAA0BjB,QAA1B,EAAoCA,QAApC,CAAD,CAA7C;AAA8FkB,IAAAA,eAAe,EAAE,EAA/G;AAAmHC,IAAAA,WAAW,EAAE,EAAhI;AAAoIC,IAAAA,aAAa,EAAE;AAAnJ,GAAZ,CAAhB;AACJ,SAAOvC,QAAQ,CAAC,EAAD,EAAKkB,KAAL,EAAY;AAAEsB,IAAAA,mBAAmB,EAAE;AAAEC,MAAAA,GAAG,EAAE,CAAC,CAAR;AAAWC,MAAAA,IAAI,EAAE,CAAC;AAAlB,KAAvB;AAA8CrB,IAAAA,eAAe,EAAEF,QAA/D;AAAyEG,IAAAA,mBAAmB,EAAEqB;AAA9F,GAAZ,CAAf;AACH","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { scrollIntoView } from './scrollIntoView';\nimport { tryAppendChange } from './tryAppendChange';\nimport { getCompatibleCellAndTemplate } from './getCompatibleCellAndTemplate';\nexport function focusLocation(state, location, resetSelection) {\n    if (resetSelection === void 0) { resetSelection = true; }\n    scrollIntoView(state, location);\n    if (state.focusedLocation && state.currentlyEditedCell) {\n        state = tryAppendChange(state, state.focusedLocation, state.currentlyEditedCell);\n    }\n    var _a = getCompatibleCellAndTemplate(state, location), cell = _a.cell, cellTemplate = _a.cellTemplate;\n    var isFocusable = !cellTemplate.isFocusable || cellTemplate.isFocusable(cell);\n    if (!isFocusable)\n        return state;\n    state.props.onFocusLocationChanged && state.props.onFocusLocationChanged({ rowId: location.row.rowId, columnId: location.column.columnId });\n    if (resetSelection)\n        state = __assign({}, state, { activeSelectedRangeIdx: 0, selectedRanges: [state.cellMatrix.getRange(location, location)], selectedIndexes: [], selectedIds: [], selectionMode: 'range' });\n    return __assign({}, state, { contextMenuPosition: { top: -1, left: -1 }, focusedLocation: location, currentlyEditedCell: undefined });\n}\n"]},"metadata":{},"sourceType":"module"}