import { CellMatrix, Behavior, Range, Location, SelectionMode, Orientation, CellChange } from '.';
import { CellTemplates, Id, Cell, ReactGridProps, Compatible, Highlight } from './PublicModel';
export declare type StateModifier = (state: State) => State;
export declare type StateUpdater = (modifier: StateModifier) => void;
export declare class State {
    update: StateUpdater;
    constructor(update: StateUpdater);
    readonly props: ReactGridProps;
    readonly legacyBrowserMode: boolean;
    readonly cellMatrix: CellMatrix;
    readonly currentBehavior: Behavior;
    readonly cellTemplates: CellTemplates;
    hiddenFocusElement: HTMLDivElement;
    readonly viewportElement: HTMLDivElement;
    hiddenScrollableElement: HTMLDivElement;
    readonly queuedCellChanges: CellChange[];
    currentlyEditedCell?: Compatible<Cell>;
    readonly highlightLocations: Highlight[];
    readonly disableFillHandle: boolean;
    readonly disableRangeSelection: boolean;
    readonly enableColumnSelection: boolean;
    readonly enableRowSelection: boolean;
    readonly disableFloatingCellEditor: boolean;
    readonly contextMenuPosition: {
        top: number;
        left: number;
    };
    readonly lineOrientation: Orientation;
    readonly linePosition: number;
    readonly shadowSize: number;
    readonly shadowPosition: number;
    readonly shadowCursor: string;
    readonly selectionMode: SelectionMode;
    readonly selectedRanges: Range[];
    readonly selectedIndexes: number[];
    readonly selectedIds: Id[];
    readonly focusedLocation?: Location;
    readonly activeSelectedRangeIdx: number;
    readonly visibleRange: Range;
    readonly minScrollTop: number;
    readonly maxScrollTop: number;
    readonly minScrollLeft: number;
    readonly maxScrollLeft: number;
    readonly log: (text: string) => void;
}
